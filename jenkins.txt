Jenkins Commands:

Setup Jenkins on AWS:
UI Flow:
Pipeline:
Automate CI/CD:
Agents / Nodes:
DevSecOps:
RBAC:
GItlab CI/CD:
Github actions:
AWS DevOPS:
Azure DevOPS:
Argo CD:

CI/CD:
    Continous Integration / Continous Deployment
        -- CI is code pushed to github, then build image, then integration testing
        -- CD is code pushed to docker hub, then deployed

    Unit Testing:
        -- testing a single unit like login, singup, product, etc

    Integration:
        -- but if i want to perform these testing on complete system then i need to do integration test 
    
    Role of Jenkins:
        -- Automate this ci cd process

Jenkins-Server-One:
    -- dedicated server for jenkins
    -- enable ssh, http, https
    -- it use more storage
    -- it uses port 8080, custom TCP for my IP

Installation (LTS):

    sudo apt update:
        -- Update the Debian apt repositories, install OpenJDK 17, and check the installation with the commands:

    sudo apt install fontconfig openjdk-17-jre:
        -- Jenkins requires Java to run, yet not all Linux distributions include Java by default.
        -- Additionally, not all Java versions are compatible with Jenkins.
        -- There are multiple Java implementations which you can use.
        -- OpenJDK is the most popular one at the moment, we will use it in this guide.

    java -version:
        -- check java version

    sudo apt update -y | sudo apt upgrade -y

    sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
        https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key

        -- wget: Downloads a file from the internet.
        -- -O /usr/share/keyrings/jenkins-keyring.asc: Saves the downloaded key at /usr/share/keyrings/jenkins-keyring.asc.
        -- https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key: URL of the Jenkins signing key.
        -- Why: This key ensures that packages from the Jenkins repository are trusted and not tampered with.


    echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
        https://pkg.jenkins.io/debian-stable binary/" | sudo tee \
        /etc/apt/sources.list.d/jenkins.list > /dev/null

        -- echo "deb [...] https://pkg.jenkins.io/debian-stable binary/": Defines the Jenkins repository location.
        -- signed-by=/usr/share/keyrings/jenkins-keyring.asc: Ensures the repository is signed with the key we added earlier.
        -- | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null: 
            -- Creates a new repository file at /etc/apt/sources.list.d/jenkins.list.
            -- tee writes the output to the file while > /dev/null prevents additional output.

    sudo apt update:
        -- Refreshes the package lists from all repositories, including the newly added Jenkins repo.
        -- Why: Ensures apt knows about the latest available Jenkins package.

    sudo apt install jenkins:
        -- Installs the Jenkins LTS version from the repository.
        -- Install Jenkins as a system service.
        -- Set up Jenkins to start automatically on boot.

    sudo systemctl start jenkins:
        -- After installation, Jenkins runs on port 8080 by default.

    sudo systemctl status jenkins:
        -- Check Jenkins status:
        
    sudo cat /var/lib/jenkins/secrets/initialAdminPassword
        -- Get the initial admin password:

Admin Setup:

    Username: Safi-Admin-Jenkins
    
    Password:
        openssl rand -base64 16:
            -- Generates a 16-byte random password in Base64 format.

Pipeline:
    -- process from github to deploy
    -- Groovy syntax is used in pipeline script
    -- declerative pipeline make stages and define script for each 
    -- static, init there are set of rules that limit it to specific task

Syntax:
    git clone url -> git url: "myUrl", branch: "myBranch":
        -- linux to groovy
        -- groovy clones for first time then only pulls
        -- it clones in /var/lib/jenkins/workspace/first-cicd

    sh "docker build ttfa_img .":
        -- every shell command is written usign sh
    
    sudo usermod -aG docker jenkins:
        -- add jenkins user to docker group

    sudo su - $USER | sudo newgrp docker:
        -- refresh group

    sudo systemctl restart jenkins:
        -- restart jenkins user

    sudo chown -R jenkins mysql-data:
        -- this gives permission to jenkins for mysql-data or any other folder if necessary 


Example Test:
pipeline {
    agent any

    stages {

        stage("code") {
            steps {
                git url: "https://github.com/safi-siddiqui-github/two-tier-flask-app.git", branch: "main"
            }
        }
        
        stage("build") {
            steps {
                sh "docker build -t ttfa_img ."
            }
        }

        stage("test") {
            steps {
                echo "code tested"
            }
        }

        stage("deploy") {
            steps {
                sh "docker compose up -d --build app"
            }
        }
    }
}

Example One:
pipeline {
    agent any

    stages {

        stage("code") {
            steps {
                git url: "https://github.com/safi-siddiqui-github/two-tier-flask-app.git", branch: "main"
            }
        }
        
        stage("pull") {
            steps {
                sh "docker pull trainwithshubham/two-tier-flask-app:latest"
                sh "docker pull mysql:latest"
            }
        }

        stage("deploy") {
            steps {
                sh "docker compose up -d"
            }
        }
    }
}

Example Two:
pipeline {
    agent any

    stages {

        stage("code") {
            steps {
                git url: "https://github.com/safi-siddiqui-github/two-tier-flask-app.git", branch: "main"
            }
        }
        
        stage("build") {
            steps {
                sh "docker pull python:3-slim"
                sh "docker build -t ttfa_img ."
                sh "docker pull mysql:latest"
            }
        }
        
        stage("deploy") {
            steps {
                sh "docker compose up -d --build app"
            }
        }
    }
}

Automate CI/CD:
    -- built image pushed to docker hub and then used in Dockerfile
    -- withCredentials scopes gives access
    -- continous delivery is done for pipeline, but pressing build now is requred 

pipeline {
    agent any

    stages {

        stage("code") {
            steps {
                git url: "https://github.com/safi-siddiqui-github/two-tier-flask-app.git", branch: "main"
            }
        }
        
        stage("build") {
            steps {
                sh "docker pull python:3-slim"
                sh "docker build -t ttfa_img ."
                sh "docker pull mysql:latest"
            }
        }
        
        
        stage("push") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "docker_hub",
                    passwordVariable: "password",
                    usernameVariable: "username",
                )]){
                    sh "docker login -u ${env.username} -p ${env.password}"
                    sh "docker image tag ttfa_img ${env.username}/ttfa_img"
                    sh "docker push ${env.username}/ttfa_img:latest"
                }
            }
        }
        
        stage("deploy") {
            steps {
                sh "docker compose up -d --build app"
            }
        }
    }
}
    
Github CI/CD:
    -- integrate github with jenkins using webhook
    -- make sure ICMP port for ping is IPv4 everywhere
    -- http://54.209.161.63:8080/github-webhook/, for github
    -- select github hook trigger for GITScm polling 

Agents / Nodes:
    -- A jenkins main server delegates lables like dev, prod, test to agent servers  
    -- Main built in node is used to setup an agent
    -- remote rot directory can be /home/ubuntu/jenkins
    -- launch agent via ssh, then we add creds to ssh user with private key in global
    -- private key will stay on main server and public key will go into ~/.ssh authorized_keys on agent
    -- non-verifying verififcation strategy
    -- in order for server to work with agent we need java on agent
    -- make sure ssh for everywhere is open

    sudo usermod -aG docker ubuntu:
        -- On agent Node
        -- add ubuntu user from main server to agent node

    sudo systemctl restart jenkins:
        -- On Main Server, as docker might not grant permissions

Roles RBAC:
    -- by default every created user works as admin
    -- we create roles to limit users to task 
    -- then assign users using Role Based Authentication 

Email:
    -- smtp sever is required to send email
    -- main server SMTPS port 465 in requried to open everywhere
    -- create app password on google
    -- create username password credentials in jenkins
    -- Extended email notification
    -- smtp.gmail.com port 465

    -- in order to test, go to email notification
    -- use smtp authentication in advanced
    -- use default suffix @gmail.com

Pipeline Example:
pipeline {
    agent { label "dev" }

    stages {

        stage("down") {
            steps {
                sh "docker compose down"
            }
        }

        stage("code") {
            steps {
                git url: "https://github.com/safi-siddiqui-github/two-tier-flask-app.git", branch: "main"
            }
        }
        
        stage("build") {
            steps {
                sh "docker pull python:3-slim"
                sh "docker build -t ttfa_img ."
                sh "docker pull mysql:latest"
            }
        }
        
        stage("push") {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "docker_hub",
                    passwordVariable: "password",
                    usernameVariable: "username",
                )]){
                    sh "docker login -u ${env.username} -p ${env.password}"
                    sh "docker image tag ttfa_img ${env.username}/ttfa_img"
                    sh "docker push ${env.username}/ttfa_img:latest"
                }
            }
        }
        
        stage("deploy") {
            steps {
                sh "docker compose up -d --build app"
            }
        }
    }

    post {
        success {
            emailext subject: "Build Success",
                body: "Build Success: TTFA",
                to: "safisiddiqui.private@gmail.com"
        }

        failure {
            emailext subject: "Build Failed",
                body: "Build Failed: TTFA",
                to: "safisiddiqui.private@gmail.com"
        }
    }

}

DevSecOps:
    -- Role Base Access Control
    -- scanned code using sonarsource
    -- file system scanned using trivy
    -- images scanned using docker scout
    -- Dependencies scanned using owasp

Trivy:
    
    Install:
        sudo apt install wget gnupg
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt update
        sudo apt install trivy

    Usage:
        trivy fs .:
            -- scans the directory

Shared Libraries:
    -- we write the jenkins first in a file and then use them in all repos
    -- manage/system/ global trusted pipeline