What is DevOps:
    -- A combination of tools and best practices to deliver apps with fast updates  

How Dev Ops Work:
    -- Development and operations team work entire application with dev, test and prod phase.
    
What is DevSecOps:
    -- Quality assurance and security is intergrated with development

    -- Automate manual task using stacks, tools to deploy code and provision infrastructure 

Benefits:
    -- Faster release CI/CD, quick new features, fixed Bugs
    -- Realiable complex infrastructure as code with testing, scaling, monitoring logging 
    -- Accountable team with reduced handovers as barrier is removed between dev and ops
    -- workflow collaboration is established allowing all to align closely on goals


Best Practices:
    -- Perform very frequent but small updates and Innovate faster
    -- More incremental in nature
    -- Less risk, faster bug fix, 
    -- release microservices without overhead updates cordination

Microservices:
    -- Microservices are a software development style that breaks down applications into smaller, independent services.
    -- Each service has its own function and communicates with other services using HTTP based APIs. 

Continous Integration:
    -- Merging code in a repo

Continous Deployment:
    -- Build, test, prepare code from repo

Infrastructure as Code:
    -- automate operating system, host configuration
    -- enforce compliance dynamically with security measures

Monitoring and logging:
    -- Capture, categorize, analyze data and logs generated by application and infrastructure
    -- Shed  insights into cause of problems in unexpected changes
    -- Create alerts or perform real-time analysis
    -- AWS CloudWatch for infrastructure, AWS CloudTrail for logs

Roles:
    -- Platfomr Engineer, SRE

AWS CI/CD history:
    -- Previously they had a release captain
    -- Role was time consuming, hectic for developers, shifted them away from product
    -- release captain would schedule release, detemine updates, assing release number, create release branch
    -- then release captain would get approval of manual task to deploy each app into its environment
    -- steps for rolling changes back from production
    -- But they witched it with automated CI/CD, practicing trunk-based development 
    -- "We have moved to using pipelines, we no longer manage individual releases"
    
NexusCorps Problem Solved:
    -- (What makes DevOps culture special? How does it differ from traditional IT culture?)
    -- Current state represent traditional IT culture
    -- (Exercise: List the DevOps cultural principles that you feel would have helped prevent NexusCorp's initial problems.)
    -- Team must collabrate from recieving to delivering the dish 
    -- (What was the most shocking aspect of NexusCorp's initial state to you?)
    -- None enforced policies for microservices
    -- (Why do you think DevOps could be a solution to NexusCorp's problems?)
    -- Managed workflow with no stress
    -- (How can DevOps be customized to fit different organizational needs?)
    -- Automate their manual workflows
    
